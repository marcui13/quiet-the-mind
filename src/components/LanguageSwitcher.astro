---
import { getLangFromUrl, languages } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const { pathname } = Astro.url;

// Remove current language from path to get the base path
const pathWithoutLang = pathname.replace(/^\/[a-z]{2}/, '') || '/';

// Generate URLs for each language
const languageUrls = Object.keys(languages).map(langCode => {
  const isDefaultLang = langCode === 'en';
  const href = isDefaultLang ? pathWithoutLang : `/${langCode}${pathWithoutLang}`;

  return {
    code: langCode,
    name: languages[langCode as keyof typeof languages],
    href,
    isActive: lang === langCode
  };
});
---

<div class="relative inline-block text-left">
  <button
    id="language-button"
    type="button"
    class="inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-2">üåê</span>
    {languages[lang as keyof typeof languages]}
    <svg class="-mr-1 ml-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    id="language-dropdown"
    class="hidden origin-top-right absolute right-0 mt-2 w-32 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-button"
  >
    <div class="py-1" role="none">
      {languageUrls.map(({ code, name, href, isActive }) => (
        <a
          href={href}
          class={`block px-4 py-2 text-sm transition-colors ${
            isActive
              ? 'bg-blue-50 dark:bg-blue-900/50 text-blue-600 dark:text-blue-400'
              : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
          }`}
          role="menuitem"
        >
          {name}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  const button = document.getElementById('language-button');
  const dropdown = document.getElementById('language-dropdown');

  if (button && dropdown) {
    button.addEventListener('click', () => {
      const isHidden = dropdown.classList.contains('hidden');
      if (isHidden) {
        dropdown.classList.remove('hidden');
        button.setAttribute('aria-expanded', 'true');
      } else {
        dropdown.classList.add('hidden');
        button.setAttribute('aria-expanded', 'false');
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (event) => {
      if (!button.contains(event.target as Node) && !dropdown.contains(event.target as Node)) {
        dropdown.classList.add('hidden');
        button.setAttribute('aria-expanded', 'false');
      }
    });
  }
</script>